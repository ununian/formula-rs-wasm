WHITESPACE = _{ " " | "\t" }

// literal 字面量

// 数字 不区分整数和浮点数，实际计算时用实数（2个 i64组成）计算，无理数感觉没必要支持，用相近的有理数表示就行
int = { ("+" | "-")? ~ ASCII_DIGIT+ } // 整数
num = @{ int ~ ("." ~ ASCII_DIGIT+)? ~ (^"e" ~ int)? }

// 字符串
string = @{ ("\"" ~ (!("\"") ~ ANY)* ~ "\"")  | ("'" ~ (!("'") ~ ANY)* ~ "'") }

literal = _{ num | string }

// 标志符，这里允许中文（合法 Unicode 字母），但是不允许数字开头
identifier = @{ (LETTER | "$" | "_") ~ (LETTER | "$" | "_" | ASCII_DIGIT)* }

// 比较运算符
compare     = _{ compare_eq | compare_ne | compare_ge | compare_le | compare_lt | compare_gt  }
compare_eq  = { "==" }
compare_ne  = { "!=" }
compare_ge  = { ">=" }
compare_le  = { "<=" }
compare_lt  = { "<" }
compare_gt  = { ">" }

// 运算符
operation   = _{ infix | postfix }
  infix   = _{ subtract | add | multiply | divide | power | rightShift | leftShift | modulus }
    add         = { "+" | "with" | "plus" | "add" }
    subtract    = { "-" | "without" | "subtract" | "minus" }
    multiply    = { "*" | "times" | "multiply by" | "mul" }
    divide      = { "/" | "divide by" | "divide" }
    power       = { "^" | "power" }
    modulus     = { "%" | "mod" }
    rightShift  = { ">>" }
    leftShift   = { "<<" }
  postfix  =  _{ fac }
    fac    =   { "!" } // 阶乘

dot = @{ "." ~ identifier } // DOT 运算符，用来访问对象的属性、函数等
variable = @{ identifier ~ dot* }

function_argument = { expr | atom }
function_call = { variable ~ "(" ~ (function_argument ~ ("," ~ function_argument)*)* ~ ")" }


// 能使用运算符的原子单元
atom = _{ (function_call | identifier | literal | "(" ~ expr ~ ")")  ~ dot*  }

compare_expr = { 
  (atom | operation_expr) ~ compare ~ (operation_expr | atom) 
}

operation_expr = { 
  (atom ~ postfix* ~ (infix ~ atom ~ !"!=" ~ postfix* )+) |
  (atom ~ !"!=" ~ postfix)  // 这种情况是只有阶乘的情况，例如 4! 
}

expr = _{ 
  compare_expr |
  operation_expr 
}

stmt = _{ (expr+ | atom) ~ ((";" ~ NEWLINE* ~ (expr+ | atom)*)*) }

formula = _{ SOI ~ stmt ~ EOI }